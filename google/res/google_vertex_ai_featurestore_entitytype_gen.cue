package res

import "list"

#google_vertex_ai_featurestore_entitytype: {
	@jsonschema(schema="https://json-schema.org/draft/2020-12/schema")
	@jsonschema(id="https://github.com/roman-mazur/cuetf/schema/google_vertex_ai_featurestore_entitytype")
	close({
		// The timestamp of when the featurestore was created in RFC3339
		// UTC "Zulu" format, with nanosecond resolution and up to nine
		// fractional digits.
		create_time?: string

		// Optional. Description of the EntityType.
		description?: string

		// All of labels (key/value pairs) present on the resource in GCP,
		// including the labels configured through Terraform, other
		// clients and services.
		effective_labels?: [string]: string

		// Used to perform consistent read-modify-write updates.
		etag?: string

		// The name of the Featurestore to use, in the format
		// projects/{project}/locations/{location}/featurestores/{featurestore}.
		featurestore!: string
		id?:           string

		// A set of key/value label pairs to assign to this EntityType.
		//
		//
		// **Note**: This field is non-authoritative, and will only manage
		// the labels present in your configuration.
		// Please refer to the field 'effective_labels' for all of the
		// labels present on the resource.
		labels?: [string]: string

		// The name of the EntityType. This value may be up to 60
		// characters, and valid characters are [a-z0-9_]. The first
		// character cannot be a number.
		name?: string
		monitoring_config?: matchN(1, [#monitoring_config, list.MaxItems(1) & [...#monitoring_config]])
		timeouts?: #timeouts

		// The region of the EntityType.
		region?: string

		// The combination of labels configured directly on the resource
		// and default labels configured on the provider.
		terraform_labels?: [string]: string

		// The timestamp of when the featurestore was last updated in
		// RFC3339 UTC "Zulu" format, with nanosecond resolution and up
		// to nine fractional digits.
		update_time?: string
	})

	#monitoring_config: close({
		categorical_threshold_config?: matchN(1, [_#defs."/$defs/monitoring_config/$defs/categorical_threshold_config", list.MaxItems(1) & [..._#defs."/$defs/monitoring_config/$defs/categorical_threshold_config"]])
		import_features_analysis?: matchN(1, [_#defs."/$defs/monitoring_config/$defs/import_features_analysis", list.MaxItems(1) & [..._#defs."/$defs/monitoring_config/$defs/import_features_analysis"]])
		numerical_threshold_config?: matchN(1, [_#defs."/$defs/monitoring_config/$defs/numerical_threshold_config", list.MaxItems(1) & [..._#defs."/$defs/monitoring_config/$defs/numerical_threshold_config"]])
		snapshot_analysis?: matchN(1, [_#defs."/$defs/monitoring_config/$defs/snapshot_analysis", list.MaxItems(1) & [..._#defs."/$defs/monitoring_config/$defs/snapshot_analysis"]])
	})

	#timeouts: close({
		create?: string
		delete?: string
		update?: string
	})

	_#defs: "/$defs/monitoring_config/$defs/categorical_threshold_config": close({
		// Specify a threshold value that can trigger the alert. For
		// categorical feature, the distribution distance is calculated
		// by L-inifinity norm. Each feature must have a non-zero
		// threshold if they need to be monitored. Otherwise no alert
		// will be triggered for that feature. The default value is 0.3.
		value!: number
	})

	_#defs: "/$defs/monitoring_config/$defs/import_features_analysis": close({
		// Defines the baseline to do anomaly detection for feature values
		// imported by each [entityTypes.importFeatureValues][]
		// operation. The value must be one of the values below:
		// * LATEST_STATS: Choose the later one statistics generated by
		// either most recent snapshot analysis or previous import
		// features analysis. If non of them exists, skip anomaly
		// detection and only generate a statistics.
		// * MOST_RECENT_SNAPSHOT_STATS: Use the statistics generated by
		// the most recent snapshot analysis if exists.
		// * PREVIOUS_IMPORT_FEATURES_STATS: Use the statistics generated
		// by the previous import features analysis if exists.
		anomaly_detection_baseline?: string

		// Whether to enable / disable / inherite default hebavior for
		// import features analysis. The value must be one of the values
		// below:
		// * DEFAULT: The default behavior of whether to enable the
		// monitoring. EntityType-level config: disabled.
		// * ENABLED: Explicitly enables import features analysis.
		// EntityType-level config: by default enables import features
		// analysis for all Features under it.
		// * DISABLED: Explicitly disables import features analysis.
		// EntityType-level config: by default disables import features
		// analysis for all Features under it.
		state?: string
	})

	_#defs: "/$defs/monitoring_config/$defs/numerical_threshold_config": close({
		// Specify a threshold value that can trigger the alert. For
		// numerical feature, the distribution distance is calculated by
		// Jensenâ€“Shannon divergence. Each feature must have a non-zero
		// threshold if they need to be monitored. Otherwise no alert
		// will be triggered for that feature. The default value is 0.3.
		value!: number
	})

	_#defs: "/$defs/monitoring_config/$defs/snapshot_analysis": close({
		// The monitoring schedule for snapshot analysis. For
		// EntityType-level config: unset / disabled = true indicates
		// disabled by default for Features under it; otherwise by
		// default enable snapshot analysis monitoring with
		// monitoringInterval for Features under it.
		disabled?: bool

		// Configuration of the snapshot analysis based monitoring
		// pipeline running interval. The value indicates number of days.
		// The default value is 1.
		// If both
		// FeaturestoreMonitoringConfig.SnapshotAnalysis.monitoring_interval_days
		// and
		// [FeaturestoreMonitoringConfig.SnapshotAnalysis.monitoring_interval][]
		// are set when creating/updating EntityTypes/Features,
		// FeaturestoreMonitoringConfig.SnapshotAnalysis.monitoring_interval_days
		// will be used.
		monitoring_interval_days?: number

		// Customized export features time window for snapshot analysis.
		// Unit is one day. The default value is 21 days. Minimum value
		// is 1 day. Maximum value is 4000 days.
		staleness_days?: number
	})
}

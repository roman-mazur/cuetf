package res

import "list"

#google_network_services_wasm_plugin: {
	@jsonschema(schema="https://json-schema.org/draft/2020-12/schema")
	@jsonschema(id="https://github.com/roman-mazur/cuetf/schema/google_network_services_wasm_plugin")
	close({
		// Output only. The timestamp when the resource was created.
		create_time?: string

		// Optional. A human-readable description of the resource.
		description?: string

		// All of labels (key/value pairs) present on the resource in GCP,
		// including the labels configured through Terraform, other
		// clients and services.
		effective_labels?: [string]: string

		// Optional. Set of labels associated with the WasmPlugin
		// resource.
		//
		// **Note**: This field is non-authoritative, and will only manage
		// the labels present in your configuration.
		// Please refer to the field 'effective_labels' for all of the
		// labels present on the resource.
		labels?: [string]: string
		id?: string

		// The location of the traffic extension
		location?: string

		// The ID of the WasmPluginVersion resource that is the currently
		// serving one. The version referred to must be a child of this
		// WasmPlugin resource and should be listed in the "versions"
		// field.
		main_version_id!: string

		// Identifier. Name of the WasmPlugin resource.
		name!: string
		log_config?: matchN(1, [#log_config, list.MaxItems(1) & [...#log_config]])
		timeouts?: #timeouts
		versions?: matchN(1, [#versions, [_, ...] & [...#versions]])
		project?: string

		// The combination of labels configured directly on the resource
		// and default labels configured on the provider.
		terraform_labels?: [string]: string

		// Output only. The timestamp when the resource was updated.
		update_time?: string

		// Output only. List of all extensions that use this WasmPlugin
		// resource.
		used_by?: [...close({
			name?: string
		})]
	})

	#log_config: close({
		// Optional. Specifies whether to enable logging for activity by
		// this plugin.
		enable?: bool

		// Non-empty default. Specificies the lowest level of the plugin
		// logs that are exported to Cloud Logging. This setting relates
		// to the logs generated by using logging statements in your Wasm
		// code.
		// This field is can be set only if logging is enabled for the
		// plugin.
		// If the field is not provided when logging is enabled, it is set
		// to INFO by default. Possible values: ["LOG_LEVEL_UNSPECIFIED",
		// "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "CRITICAL"]
		min_log_level?: string

		// Non-empty default. Configures the sampling rate of activity
		// logs, where 1.0 means all logged activity is reported and 0.0
		// means no activity is reported.
		// A floating point value between 0.0 and 1.0 indicates that a
		// percentage of log messages is stored.
		// The default value when logging is enabled is 1.0. The value of
		// the field must be between 0 and 1 (inclusive).
		// This field can be specified only if logging is enabled for this
		// plugin.
		sample_rate?: number
	})

	#timeouts: close({
		create?: string
		delete?: string
		update?: string
	})

	#versions: close({
		// Output only. The timestamp when the resource was created.
		create_time?: string

		// Optional. A human-readable description of the resource.
		description?: string

		// Output only. The resolved digest for the image specified in the
		// image field. The digest is resolved during the creation of
		// WasmPluginVersion resource.
		// This field holds the digest value, regardless of whether a tag
		// or digest was originally specified in the image field.
		image_digest?: string

		// Optional. URI of the container image containing the plugin,
		// stored in the Artifact Registry. When a new WasmPluginVersion
		// resource is created, the digest of the container image is
		// saved in the imageDigest field.
		// When downloading an image, the digest value is used instead of
		// an image tag.
		image_uri?: string

		// Optional. Set of labels associated with the WasmPlugin
		// resource.
		labels?: [string]: string

		// A base64-encoded string containing the configuration for the
		// plugin. The configuration is provided to the plugin at runtime
		// through the ON_CONFIGURE callback.
		// When a new WasmPluginVersion resource is created, the digest of
		// the contents is saved in the pluginConfigDigest field.
		// Conflics with pluginConfigUri.
		plugin_config_data?: string

		// Output only. This field holds the digest (usually checksum)
		// value for the plugin configuration.
		// The value is calculated based on the contents of
		// pluginConfigData or the container image defined by the
		// pluginConfigUri field.
		plugin_config_digest?: string

		// URI of the plugin configuration stored in the Artifact
		// Registry. The configuration is provided to the plugin at
		// runtime through the ON_CONFIGURE callback.
		// The container image must contain only a single file with the
		// name plugin.config.
		// When a new WasmPluginVersion resource is created, the digest of
		// the container image is saved in the pluginConfigDigest field.
		// Conflics with pluginConfigData.
		plugin_config_uri?: string

		// Output only. The timestamp when the resource was updated.
		update_time?:  string
		version_name!: string
	})
}

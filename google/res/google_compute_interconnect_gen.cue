package res

import "list"

#google_compute_interconnect: {
	@jsonschema(schema="https://json-schema.org/draft/2020-12/schema")
	@jsonschema(id="https://github.com/roman-mazur/cuetf/schema/google_compute_interconnect")
	close({
		// Administrative status of the interconnect. When this is set to
		// true, the Interconnect is
		// functional and can carry traffic. When set to false, no packets
		// can be carried over the
		// interconnect and no BGP routes are exchanged over it. By
		// default, the status is set to true.
		admin_enabled?: bool

		// interconnects.list of features available for this Interconnect
		// connection. Can take the value:
		// MACSEC. If present then the Interconnect connection is
		// provisioned on MACsec capable hardware
		// ports. If not present then the Interconnect connection is
		// provisioned on non-MACsec capable
		// ports and MACsec isn't supported and enabling MACsec fails).
		available_features?: [...string]

		// A list of CircuitInfo objects, that describe the individual
		// circuits in this LAG.
		circuit_infos?: [...close({
			customer_demarc_id?: string
			google_circuit_id?:  string
			google_demarc_id?:   string
		})]

		// Creation timestamp in RFC3339 text format.
		creation_timestamp?: string

		// Customer name, to put in the Letter of Authorization as the
		// party authorized to request a
		// crossconnect. This field is required for Dedicated and Partner
		// Interconnect, should not be specified
		// for cross-cloud interconnect.
		customer_name?: string

		// An optional description of this resource. Provide this property
		// when you create the resource.
		description?: string

		// All of labels (key/value pairs) present on the resource in GCP,
		// including the labels configured through Terraform, other
		// clients and services.
		effective_labels?: [string]: string

		// A list of outages expected for this Interconnect.
		expected_outages?: [...close({
			affected_circuits?: [...string]
			description?: string
			end_time?:    string
			issue_type?:  string
			name?:        string
			source?:      string
			start_time?:  string
			state?:       string
		})]

		// IP address configured on the Google side of the Interconnect
		// link.
		// This can be used only for ping tests.
		google_ip_address?: string

		// Google reference ID to be used when raising support tickets
		// with Google or otherwise to debug
		// backend connectivity issues.
		google_reference_id?: string

		// A list of the URLs of all InterconnectAttachments configured to
		// use this Interconnect.
		interconnect_attachments?: [...string]
		id?: string

		// URLs of InterconnectGroups that include this Interconnect.
		// Order is arbitrary and items are unique.
		interconnect_groups?: [...string]

		// Type of interconnect. Note that a value IT_PRIVATE has been
		// deprecated in favor of DEDICATED.
		// Can take one of the following values:
		// - PARTNER: A partner-managed interconnection shared between
		// customers though a partner.
		// - DEDICATED: A dedicated physical interconnection with the
		// customer. Possible values: ["DEDICATED", "PARTNER",
		// "IT_PRIVATE"]
		interconnect_type!: string

		// A fingerprint for the labels being applied to this
		// Interconnect, which is essentially a hash
		// of the labels set used for optimistic locking. The fingerprint
		// is initially generated by
		// Compute Engine and changes after every request to modify or
		// update labels.
		// You must always provide an up-to-date fingerprint hash in order
		// to update or change labels,
		// otherwise the request will fail with error 412 conditionNotMet.
		label_fingerprint?: string

		// Labels for this resource. These can only be added or modified
		// by the setLabels
		// method. Each label key/value pair must comply with RFC1035.
		// Label values may be empty.
		//
		//
		// **Note**: This field is non-authoritative, and will only manage
		// the labels present in your configuration.
		// Please refer to the field 'effective_labels' for all of the
		// labels present on the resource.
		labels?: [string]: string

		// Type of link requested. Note that this field indicates the
		// speed of each of the links in the
		// bundle, not the speed of the entire bundle. Can take one of the
		// following values:
		// - LINK_TYPE_ETHERNET_10G_LR: A 10G Ethernet with LR optics.
		// - LINK_TYPE_ETHERNET_100G_LR: A 100G Ethernet with LR optics.
		// - LINK_TYPE_ETHERNET_400G_LR4: A 400G Ethernet with LR4 optics
		// Possible values: ["LINK_TYPE_ETHERNET_10G_LR",
		// "LINK_TYPE_ETHERNET_100G_LR", "LINK_TYPE_ETHERNET_400G_LR4"]
		link_type!: string

		// URL of the InterconnectLocation object that represents where
		// this connection is to be provisioned.
		// Specifies the location inside Google's Networks.
		location!: string
		macsec?: matchN(1, [#macsec, list.MaxItems(1) & [...#macsec]])
		timeouts?: #timeouts

		// Enable or disable MACsec on this Interconnect connection.
		// MACsec enablement fails if the MACsec object is not specified.
		macsec_enabled?: bool

		// Name of the resource. Provided by the client when the resource
		// is created. The name must be
		// 1-63 characters long, and comply with RFC1035. Specifically,
		// the name must be 1-63 characters
		// long and match the regular expression
		// '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first
		// character must be a lowercase letter, and all following
		// characters must be a dash,
		// lowercase letter, or digit, except the last character, which
		// cannot be a dash.
		name!: string

		// Email address to contact the customer NOC for operations and
		// maintenance notifications
		// regarding this Interconnect. If specified, this will be used
		// for notifications in addition to
		// all other forms described, such as Cloud Monitoring logs
		// alerting and Cloud Notifications.
		// This field is required for users who sign up for Cloud
		// Interconnect using workforce identity
		// federation.
		noc_contact_email?: string

		// The current status of this Interconnect's functionality, which
		// can take one of the following:
		// - OS_ACTIVE: A valid Interconnect, which is turned up and is
		// ready to use. Attachments may
		// be provisioned on this Interconnect.
		// - OS_UNPROVISIONED: An Interconnect that has not completed
		// turnup. No attachments may be
		// provisioned on this Interconnect.
		// - OS_UNDER_MAINTENANCE: An Interconnect that is undergoing
		// internal maintenance. No
		// attachments may be provisioned or updated on this Interconnect.
		operational_status?: string

		// IP address configured on the customer side of the Interconnect
		// link.
		// The customer should configure this IP address during turnup
		// when prompted by Google NOC.
		// This can be used only for ping tests.
		peer_ip_address?: string

		// Number of links actually provisioned in this interconnect.
		provisioned_link_count?: number
		project?:                string

		// Indicates that this is a Cross-Cloud Interconnect. This field
		// specifies the location outside
		// of Google's network that the interconnect is connected to.
		remote_location?: string

		// interconnects.list of features requested for this Interconnect
		// connection. Options: IF_MACSEC (
		// If specified then the connection is created on MACsec capable
		// hardware ports. If not
		// specified, the default value is false, which allocates
		// non-MACsec capable ports first if
		// available). Note that MACSEC is still technically allowed for
		// compatibility reasons, but it
		// does not work with the API, and will be removed in an upcoming
		// major version. Possible values: ["MACSEC",
		// "CROSS_SITE_NETWORK", "IF_MACSEC"]
		requested_features?: [...string]

		// Target number of physical links in the link bundle, as
		// requested by the customer.
		requested_link_count!: number

		// Reserved for future use.
		satisfies_pzs?: bool

		// The current state of Interconnect functionality, which can take
		// one of the following values:
		// - ACTIVE: The Interconnect is valid, turned up and ready to
		// use.
		// Attachments may be provisioned on this Interconnect.
		// - UNPROVISIONED: The Interconnect has not completed turnup. No
		// attachments may b
		// provisioned on this Interconnect.
		// - UNDER_MAINTENANCE: The Interconnect is undergoing internal
		// maintenance. No attachments may
		// be provisioned or updated on this Interconnect.
		state?: string

		// The combination of labels configured directly on the resource
		// and default labels configured on the provider.
		terraform_labels?: [string]: string
	})

	#macsec: close({
		pre_shared_keys?: matchN(1, [_#defs."/$defs/macsec/$defs/pre_shared_keys", [_, ...] & [..._#defs."/$defs/macsec/$defs/pre_shared_keys"]])

		// If set to true, the Interconnect connection is configured with
		// a should-secure
		// MACsec security policy, that allows the Google router to
		// fallback to cleartext
		// traffic if the MKA session cannot be established. By default,
		// the Interconnect
		// connection is configured with a must-secure security policy
		// that drops all traffic
		// if the MKA session cannot be established with your router.
		fail_open?: bool
	})

	#timeouts: close({
		create?: string
		delete?: string
		update?: string
	})

	_#defs: "/$defs/macsec/$defs/pre_shared_keys": close({
		// A name for this pre-shared key. The name must be 1-63
		// characters long, and
		// comply with RFC1035. Specifically, the name must be 1-63
		// characters long and match
		// the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means
		// the first character
		// must be a lowercase letter, and all following characters must
		// be a dash, lowercase
		// letter, or digit, except the last character, which cannot be a
		// dash.
		name!: string

		// A RFC3339 timestamp on or after which the key is valid.
		// startTime can be in the
		// future. If the keychain has a single key, startTime can be
		// omitted. If the keychain
		// has multiple keys, startTime is mandatory for each key. The
		// start times of keys must
		// be in increasing order. The start times of two consecutive keys
		// must be at least 6
		// hours apart.
		start_time?: string
	})
}

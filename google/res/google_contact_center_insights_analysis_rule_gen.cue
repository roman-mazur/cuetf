package res

import "list"

#google_contact_center_insights_analysis_rule: {
	@jsonschema(schema="https://json-schema.org/draft/2020-12/schema")
	@jsonschema(id="https://github.com/roman-mazur/cuetf/schema/google_contact_center_insights_analysis_rule")
	close({
		// If true, apply this rule to conversations. Otherwise, this rule
		// is
		// inactive and saved as a draft.
		active?: bool

		// Percentage of conversations that we should apply this analysis
		// setting
		// automatically, between [0, 1]. For example, 0.1 means 10%.
		// Conversations
		// are sampled in a determenestic way. The original
		// runtime_percentage &
		// upload percentage will be replaced by defining filters on the
		// conversation.
		analysis_percentage?: number

		// Filter for the conversations that should apply this analysis
		// rule. An empty filter means this analysis rule applies to all
		// conversations.
		// Refer to
		// https://cloud.google.com/contact-center/insights/docs/filtering
		// for details.
		conversation_filter?: string

		// Output only. The time at which this analysis rule was created.
		create_time?: string

		// Display Name of the analysis rule.
		display_name?: string
		id?:           string

		// Location of the resource.
		location!: string
		annotator_selector?: matchN(1, [#annotator_selector, list.MaxItems(1) & [...#annotator_selector]])
		timeouts?: #timeouts

		// The resource name of the analysis rule. Randomly generated by
		// Insights.
		name?:    string
		project?: string

		// Output only. The most recent time at which this analysis rule
		// was updated.
		update_time?: string
	})

	#annotator_selector: close({
		// The issue model to run. If not provided, the most recently
		// deployed topic
		// model will be used. The provided issue model will only be used
		// for
		// inference if the issue model is deployed and if
		// run_issue_model_annotator
		// is set to true. If more than one issue model is provided, only
		// the first
		// provided issue model will be used for inference.
		issue_models?: [...string]

		// The list of phrase matchers to run. If not provided, all active
		// phrase
		// matchers will be used. If inactive phrase matchers are
		// provided, they will
		// not be used. Phrase matchers will be run only if
		// run_phrase_matcher_annotator is set to true. Format:
		// projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}
		phrase_matchers?: [...string]

		// Whether to run the entity annotator.
		run_entity_annotator?: bool

		// Whether to run the intent annotator.
		run_intent_annotator?: bool

		// Whether to run the interruption annotator.
		run_interruption_annotator?: bool

		// Whether to run the issue model annotator. A model should have
		// already been
		// deployed for this to take effect.
		run_issue_model_annotator?: bool

		// Whether to run the active phrase matcher annotator(s).
		run_phrase_matcher_annotator?: bool

		// Whether to run the QA annotator.
		run_qa_annotator?: bool
		qa_config?: matchN(1, [_#defs."/$defs/annotator_selector/$defs/qa_config", list.MaxItems(1) & [..._#defs."/$defs/annotator_selector/$defs/qa_config"]])
		summarization_config?: matchN(1, [_#defs."/$defs/annotator_selector/$defs/summarization_config", list.MaxItems(1) & [..._#defs."/$defs/annotator_selector/$defs/summarization_config"]])

		// Whether to run the sentiment annotator.
		run_sentiment_annotator?: bool

		// Whether to run the silence annotator.
		run_silence_annotator?: bool

		// Whether to run the summarization annotator.
		run_summarization_annotator?: bool
	})

	#timeouts: close({
		create?: string
		delete?: string
		update?: string
	})

	_#defs: "/$defs/annotator_selector/$defs/qa_config": close({
		scorecard_list?: matchN(1, [_#defs."/$defs/annotator_selector/$defs/qa_config/$defs/scorecard_list", list.MaxItems(1) & [..._#defs."/$defs/annotator_selector/$defs/qa_config/$defs/scorecard_list"]])
	})

	_#defs: "/$defs/annotator_selector/$defs/qa_config/$defs/scorecard_list": close({
		// List of QaScorecardRevisions.
		qa_scorecard_revisions?: [...string]
	})

	_#defs: "/$defs/annotator_selector/$defs/summarization_config": close({
		// Resource name of the Dialogflow conversation profile.
		// Format:
		// projects/{project}/locations/{location}/conversationProfiles/{conversation_profile}
		conversation_profile?: string

		// Default summarization model to be used.
		// Possible values:
		// SUMMARIZATION_MODEL_UNSPECIFIED
		// BASELINE_MODEL
		// BASELINE_MODEL_V2_0 Possible values: ["BASELINE_MODEL",
		// "BASELINE_MODEL_V2_0"]
		summarization_model?: string
	})
}

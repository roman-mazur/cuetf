package data

#cloudflare_zero_trust_dns_locations: {
	@jsonschema(schema="https://json-schema.org/draft/2020-12/schema")
	@jsonschema(id="https://github.com/roman-mazur/cuetf/schema/cloudflare_zero_trust_dns_locations")
	close({
		account_id!: string

		// Max items to fetch, default: 1000
		max_items?: number

		// The items returned by the data source
		result?: matchN(1, [close({
			// True if the location is the default location.
			client_default?: bool
			created_at?:     string

			// The identifier of the pair of IPv4 addresses assigned to this
			// location.
			dns_destination_ips_id?: string

			// The uuid identifier of the IPv6 block brought to the gateway,
			// so that this location's IPv6 address is allocated from the
			// Bring Your Own Ipv6(BYOIPv6) block and not from the standard
			// Cloudflare IPv6 block.
			dns_destination_ipv6_block_id?: string

			// The destination endpoints configured for this location. When
			// updating a location, if this field is absent or set with null,
			// the endpoints configuration remains unchanged.
			endpoints?: close({
				doh?: close({
					// A list of allowed source IP network ranges for this endpoint.
					// When empty, all source IPs are allowed. A non-empty list is
					// only effective if the endpoint is enabled for this location.
					networks?: matchN(1, [close({
						// The IP address or IP CIDR.
						network?: string
					}), [...close({
						// The IP address or IP CIDR.
						network?: string
					})]])

					// True if the endpoint is enabled for this location.
					enabled?: bool

					// True if the endpoint requires [user
					// identity](https://developers.cloudflare.com/cloudflare-one/connections/connect-devices/agentless/dns/dns-over-https/#filter-doh-requests-by-user)
					// authentication.
					require_token?: bool
				})
				dot?: close({
					// True if the endpoint is enabled for this location.
					enabled?: bool

					// A list of allowed source IP network ranges for this endpoint.
					// When empty, all source IPs are allowed. A non-empty list is
					// only effective if the endpoint is enabled for this location.
					networks?: matchN(1, [close({
						// The IP address or IP CIDR.
						network?: string
					}), [...close({
						// The IP address or IP CIDR.
						network?: string
					})]])
				})
				ipv4?: close({
					// True if the endpoint is enabled for this location.
					enabled?: bool
				})
				ipv6?: close({
					// True if the endpoint is enabled for this location.
					enabled?: bool

					// A list of allowed source IPv6 network ranges for this endpoint.
					// When empty, all source IPs are allowed. A non-empty list is
					// only effective if the endpoint is enabled for this location.
					networks?: matchN(1, [close({
						// The IPv6 address or IPv6 CIDR.
						network?: string
					}), [...close({
						// The IPv6 address or IPv6 CIDR.
						network?: string
					})]])
				})
			})

			// The DNS over HTTPS domain to send DNS requests to. This field
			// is auto-generated by Gateway.
			doh_subdomain?: string

			// True if the location needs to resolve EDNS queries.
			ecs_support?: bool
			id?:          string

			// IPV6 destination ip assigned to this location. DNS requests
			// sent to this IP will counted as the request under this
			// location. This field is auto-generated by Gateway.
			ip?: string

			// A list of network ranges that requests from this location would
			// originate from. A non-empty list is only effective if the ipv4
			// endpoint is enabled for this location.
			networks?: matchN(1, [close({
				// The IPv4 address or IPv4 CIDR. IPv4 CIDRs are limited to a
				// maximum of /24.
				network?: string
			}), [...close({
				// The IPv4 address or IPv4 CIDR. IPv4 CIDRs are limited to a
				// maximum of /24.
				network?: string
			})]])

			// The primary destination IPv4 address from the pair identified
			// by the dns_destination_ips_id. This field is read-only.
			ipv4_destination?: string

			// The backup destination IPv4 address from the pair identified by
			// the dns_destination_ips_id. This field is read-only.
			ipv4_destination_backup?: string

			// The name of the location.
			name?:       string
			updated_at?: string
		}), [...close({
			// True if the location is the default location.
			client_default?: bool
			created_at?:     string

			// The identifier of the pair of IPv4 addresses assigned to this
			// location.
			dns_destination_ips_id?: string

			// The uuid identifier of the IPv6 block brought to the gateway,
			// so that this location's IPv6 address is allocated from the
			// Bring Your Own Ipv6(BYOIPv6) block and not from the standard
			// Cloudflare IPv6 block.
			dns_destination_ipv6_block_id?: string

			// The destination endpoints configured for this location. When
			// updating a location, if this field is absent or set with null,
			// the endpoints configuration remains unchanged.
			endpoints?: close({
				doh?: close({
					// A list of allowed source IP network ranges for this endpoint.
					// When empty, all source IPs are allowed. A non-empty list is
					// only effective if the endpoint is enabled for this location.
					networks?: matchN(1, [close({
						// The IP address or IP CIDR.
						network?: string
					}), [...close({
						// The IP address or IP CIDR.
						network?: string
					})]])

					// True if the endpoint is enabled for this location.
					enabled?: bool

					// True if the endpoint requires [user
					// identity](https://developers.cloudflare.com/cloudflare-one/connections/connect-devices/agentless/dns/dns-over-https/#filter-doh-requests-by-user)
					// authentication.
					require_token?: bool
				})
				dot?: close({
					// True if the endpoint is enabled for this location.
					enabled?: bool

					// A list of allowed source IP network ranges for this endpoint.
					// When empty, all source IPs are allowed. A non-empty list is
					// only effective if the endpoint is enabled for this location.
					networks?: matchN(1, [close({
						// The IP address or IP CIDR.
						network?: string
					}), [...close({
						// The IP address or IP CIDR.
						network?: string
					})]])
				})
				ipv4?: close({
					// True if the endpoint is enabled for this location.
					enabled?: bool
				})
				ipv6?: close({
					// True if the endpoint is enabled for this location.
					enabled?: bool

					// A list of allowed source IPv6 network ranges for this endpoint.
					// When empty, all source IPs are allowed. A non-empty list is
					// only effective if the endpoint is enabled for this location.
					networks?: matchN(1, [close({
						// The IPv6 address or IPv6 CIDR.
						network?: string
					}), [...close({
						// The IPv6 address or IPv6 CIDR.
						network?: string
					})]])
				})
			})

			// The DNS over HTTPS domain to send DNS requests to. This field
			// is auto-generated by Gateway.
			doh_subdomain?: string

			// True if the location needs to resolve EDNS queries.
			ecs_support?: bool
			id?:          string

			// IPV6 destination ip assigned to this location. DNS requests
			// sent to this IP will counted as the request under this
			// location. This field is auto-generated by Gateway.
			ip?: string

			// A list of network ranges that requests from this location would
			// originate from. A non-empty list is only effective if the ipv4
			// endpoint is enabled for this location.
			networks?: matchN(1, [close({
				// The IPv4 address or IPv4 CIDR. IPv4 CIDRs are limited to a
				// maximum of /24.
				network?: string
			}), [...close({
				// The IPv4 address or IPv4 CIDR. IPv4 CIDRs are limited to a
				// maximum of /24.
				network?: string
			})]])

			// The primary destination IPv4 address from the pair identified
			// by the dns_destination_ips_id. This field is read-only.
			ipv4_destination?: string

			// The backup destination IPv4 address from the pair identified by
			// the dns_destination_ips_id. This field is read-only.
			ipv4_destination_backup?: string

			// The name of the location.
			name?:       string
			updated_at?: string
		})]])
	})
}
